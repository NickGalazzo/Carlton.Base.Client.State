// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace Carlton.Base.Client.State
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\nicho\Documents\code\Project Carlton\libs\Carlton.Base.Client.State\CarltonDataWrapper.razor"
using MediatR;

#line default
#line hidden
#nullable disable
    public partial class CarltonDataWrapper<TViewModel> : Microsoft.AspNetCore.Components.ComponentBase, IDisposable
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 8 "C:\Users\nicho\Documents\code\Project Carlton\libs\Carlton.Base.Client.State\CarltonDataWrapper.razor"
      
    [Parameter]
    public RenderFragment<CarltonDataWrapperContext<TViewModel>> ChildComponent { get; set; }

    [Inject]
    private IMediator Mediatr { get; set; }

    [Inject]
    private ICarltonStateFactory factory { get; set; }

    [Inject]
    private ICarltonStateStore State { get; set; }

    private IEnumerable<string> _stateEvents;

    protected CarltonDataWrapperContext<TViewModel> Context { get; set; }
        = new CarltonDataWrapperContext<TViewModel>(default(TViewModel), (obj) => Task.CompletedTask);

    protected async override Task OnInitializedAsync()
    {
        //Register State Changed Handler
        State.StateChanged += OnStateChanged;

        ////Get VM and initalize context for wrapped component
        var vm = await GetViewModel();

        Context = new CarltonDataWrapperContext<TViewModel>(vm, OnComponentEvent);

        //Get State Events
        _stateEvents = factory.GetComponentStateEvents<TViewModel>();

        //Continue initilization
        await base.OnInitializedAsync();
    }

    protected async Task<TViewModel> GetViewModel()
    {
        return await Mediatr.Send(factory.CreateViewModelRequest<TViewModel>());
    }

    private async Task OnComponentEvent(object evt)
    {
        var request = factory.CreateComponentEventRequest(this, evt);
        await Mediatr.Send(request);
    }

    private async Task OnStateChanged(object sender, string stateEvent)
    {
        if(!_stateEvents.Contains(stateEvent))
            return;


        Context.ViewModel = await GetViewModel();
        StateHasChanged();
    }

    public void Dispose()
    {
        State.StateChanged -= OnStateChanged;
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private System.Net.Http.HttpClient _client { get; set; }
    }
}
#pragma warning restore 1591
